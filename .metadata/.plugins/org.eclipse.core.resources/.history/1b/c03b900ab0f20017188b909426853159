package com.practice.springaspect.aspect;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.Signature;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;

@Aspect
@Component
@Order(3)
public class LoggingAspect {

	@Before("com.practice.springaspect.aspect.PointcutAspectFactory.forDAOPackage()")
	public void beforeLogging(JoinPoint joinPoint) {

		Signature signature = joinPoint.getSignature();
		System.out.println(signature.toShortString());
		for (Object arg : joinPoint.getArgs()) {
			System.out.println(arg);
		}
		System.out.println("==>Logging functionality");
	}

	@AfterReturning(pointcut = "execution(* com.practice.springaspect.aspect.dao.*.get*())", returning = "result")
	public void afterReturningExample(String result) {
		System.out.println("returned value: " + result);
	}

}
